package com.whollyframework.base.dao.support;

import com.whollyframework.base.dao.support.criterion.Criterion;
import com.whollyframework.base.dao.support.dynasql.DeleteSQLCriterion;
import com.whollyframework.base.dao.support.dynasql.InsertSQLCriterion;
import com.whollyframework.base.dao.support.dynasql.SelectSQLCriterion;
import com.whollyframework.base.dao.support.dynasql.UpdateSQLCriterion;
import com.whollyframework.base.model.ParamsTable;

/**
 * 
 * @author Chris Xu
 * 
 */
public class SQLUtils extends AbstractSQLUtils{

	protected DynaSQLCriteria dynaSQLCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table test_y
	 * 
	 * @ibatorgenerated Mon Mar 15 11:03:37 CST 2010
	 */
	public SQLUtils() {
		dynaSQLCriteria = new DynaSQLCriteria();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table test_y
	 * 
	 * @ibatorgenerated Mon Mar 15 11:03:37 CST 2010
	 */
	protected SQLUtils(SQLUtils example) {
	    super(example);
		dynaSQLCriteria = example.dynaSQLCriteria;
	}

	public DynaSQLCriteria getDynaSQLCriteria() {
		return dynaSQLCriteria;
	}

	public static class DynaSQLCriteria{
	    private InsertSQLCriterion insert = new InsertSQLCriterion();
	    private UpdateSQLCriterion update = new UpdateSQLCriterion();
	    private SelectSQLCriterion select = new SelectSQLCriterion();
	    private DeleteSQLCriterion delete = new DeleteSQLCriterion();
	    
        public InsertSQLCriterion getInsert() {
            return insert;
        }
        public UpdateSQLCriterion getUpdate() {
            return update;
        }
        public SelectSQLCriterion getSelect() {
            return select;
        }
        public DeleteSQLCriterion getDelete() {
            return delete;
        }
	}

	public Object getFilterCriterions(){
        return criterionList.toArray(new Criterion[criterionList.size()]);
    }

	public static void main(String[] args) throws Exception {
		SQLUtils utils = new SQLUtils();

		ParamsTable params = new ParamsTable();
		params.setParameter("$b$[aField!=bField]s_wField", "ssss");
		params.setParameter("s_wField", "sss1");
		params.setParameter("n_wField", "1");
		params.setParameter("d_aaField", "2014-06-22 12:30:30 222");
		utils.createWhere(params);
		System.out.println(utils.createWhereWithString(params));
		
		// $b$[aField!=bField]n_wField
		// Pattern pattern = Pattern.compile("[$(\\[){1}(!=){1}=(\\]){1}]+");
		// String[] strs = pattern.split("$b$[aField!=bField]n_wField");
		// System.out.println(strs.length);
		// for (int i=0;i<strs.length;i++) {
		// System.out.println(strs[i]);
		// }
		// String temp =
		// " (tlk_testsuggest)a,(select * from test where aa=bb)t where id in
		// (select id from tlk_testsuggest)";
		// log.info("SQL1: " + " " + temp.substring(0,
		// utils.getSubSelectEndIndex(temp)));
		// 子查询1
		// String sql = "select * from (select * from tlk_项目计划视图 t1 union all
		// select * from tlk_项目阶段计划视图 t2 union all select * from tlk_任务分解发布视图
		// t3) t where '11df-66d6-9562hec2-af6a-575bd4004d59' in (select
		// item_项目成员 from tlk_项目成员 a where a.parent in (select b.id from
		// tlk_项目初始化 b where (b.item_code=t.item_code or item_code=t.item_pcode
		// or item_code in (select item_pcode from tlk_项目阶段计划视图 where item_code
		// = t.item_pcode))))";
		// String sql =
		// "SELECT a.*,(when t.a==1 case select b from tttt end) as bb, (when t.a case 2 select b from tttt case 3 select c from ttt end) as cc FROM (tlk_testsuggest)a,(select * from test where aaattt= sfd )t WHERE id IN (SELECT id FROM tlk_testsuggest)";
		// log.info("SQL1: "
		// + "  "
		// + utils.appendConditionToLast(sql,
		// "ITEM_pcode= '' or ITEM_pcode is null"));
		// // 子查询2
		// String sql2 = "SELECT * FROM (SELECT * FROM tlk_testsuggest) doc";
		// log.info("SQL2: " + utils.appendConditionToLast(sql2,
		// "parent='parentid'"));
		// sql2 =
		// "SELECT * FROM (SELECT * FROM tlk_testsuggest) doc WHERE (id='id')";
		// // 出错
		// log.info("SQL2-1出错: " + utils.appendConditionToLast(sql2,
		// "parent='parentid'"));
		// sql2 =
		// "SELECT * FROM (SELECT * FROM tlk_testsuggest) doc WHERE id='id'"; //
		// 正常
		// log.info("SQL2-2正常: " + utils.appendConditionToLast(sql2,
		// "parent='parentid'"));
		// // 普通
		// String sql3 = "SELECT * FROM tlk_testsuggest doc";
		// log.info("SQL3: "+ utils.appendConditionToLast(sql3,
		// "parent='parentid'"));
		// sql3 = "SELECT * FROM tlk_testsuggest doc WHERE id='id'";
		// log.info("SQL3-1: " + utils.appendConditionToLast(sql3,
		// "parent='parentid'"));
		// sql3 =
		// "SELECT * FROM tlk_testsuggest doc WHERE id='id' AND name='name'";
		// log.info("SQL3-2: " + utils.appendConditionToLast(sql3,
		// "parent='parentid'"));
	}
}
